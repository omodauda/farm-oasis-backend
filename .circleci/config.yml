version: 2.1

commands:
  destroy-environment:
    description: Destroy backend cloudformation stack given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments on failure
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>

jobs:

  build-backend:
    docker:
      - image: cimg/node:16.15.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-backend:
    docker:
      - image: cimg/node:16.15.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend for security vulnerabilities
          command: |
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: 'install tar utility'
          command: |
            yum install -y tar gzip
      - run:
          name: deploy backend server
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=farmoasis \
              --stack-name "farmoasis-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo $(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters Name=tag:aws:cloudformation:stack-name,Values=farmoasis-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text) >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["18:39:04:07:48:73:4e:73:37:fe:21:9b:b8:66:e6:97"]
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies
          command: |
            apk add --update tar gzip ansible
            pip install awscli
      - run:
          name: configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["18:39:04:07:48:73:4e:73:37:fe:21:9b:b8:66:e6:97"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            npm install
            npm run build
            # zip the directory
            mkdir artifacts
            tar -zcvf artifacts/artifact.tar.gz --exclude=./artifacts .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifacts/artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-backend
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - deploy-backend:
      #     requires: [configure-infrastructure]